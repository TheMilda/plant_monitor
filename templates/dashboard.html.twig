<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Herbal Garden Dashboard</title>

    <!-- Include Chart.js and Date Adapter -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <!-- Link to CSS file -->
    <link rel="stylesheet" href="/css/style.css"> 

    <style>
        canvas {
            max-height: 300px;
            width: 100%;
        }

        /* Make pot cards clickable */
        .pot-card {
            cursor: pointer;
            text-align: center;
            padding: 15px;
            background-color: #e0f7fa;
            border-radius: 8px;
            transition: 0.3s;
        }

        .pot-card:hover {
            background-color: #b2ebf2;
        }
    </style>
</head>

<body>
    <div class="container">
        <header>
            <h1>🌿 Welcome Back, Milena!</h1>
            <p id="date"></p>
        </header>

        <!-- Environmental Data Section -->
        <section class="weather">
            <h2>🌤 Environmental Conditions</h2>
            <div class="weather-grid">
                <div class="card"><p>🌡 Temperature</p><span id="temperature">--°C</span></div>
                <div class="card"><p>💧 Humidity</p><span id="humidity">--%</span></div>
                <div class="card"><p>🌍 Pressure</p><span id="pressure">-- hPa</span></div>
                <div class="card"><p>💡 Luminance</p><span id="luminance">-- lux</span></div>
            </div>
        </section>

        <!-- Soil Moisture Section -->
        <section class="moisture">
            <h2>🌱 Soil Moisture</h2>
            <div class="moisture-grid">
                <a href="{{ path('chart', {'pot': 'A'}) }}" class="pot-card">
                    <p>Pot A 🌊</p><span id="potA">--%</span>
                </a>
                <a href="{{ path('chart', {'pot': 'B'}) }}" class="pot-card">
                    <p>Pot B 🌊</p><span id="potB">--%</span>
                </a>
                <a href="{{ path('chart', {'pot': 'C'}) }}" class="pot-card">
                    <p>Pot C 🌊</p><span id="potC">--%</span>
                </a>
            </div>
        </section>

        <!-- 📊 Charts Section -->
        <section class="charts">
            <h2>📊 Environmental Data Trends</h2>
            <canvas id="temperatureChart"></canvas>
            <canvas id="humidityChart"></canvas>
            <canvas id="pressureChart"></canvas>
            <canvas id="luminanceChart"></canvas>
        </section>
    </div>

    <script>
        document.getElementById("date").innerText = new Date().toDateString();

        let temperatureChart, humidityChart, pressureChart, luminanceChart;

        function updateDashboardValues(latestData) {
            document.getElementById("temperature").innerText = latestData.temperature ? latestData.temperature.y.toFixed(1) + "°C" : "--";
            document.getElementById("humidity").innerText = latestData.humidity ? latestData.humidity.y.toFixed(1) + "%" : "--";
            document.getElementById("pressure").innerText = latestData.pressure ? latestData.pressure.y.toFixed(1) + " hPa" : "--";
            document.getElementById("luminance").innerText = latestData.luminance ? latestData.luminance.y.toFixed(1) + " lux" : "--";

            document.getElementById("potA").innerText = latestData.moisture_a ? latestData.moisture_a.y.toFixed(1) + "%" : "--";
            document.getElementById("potB").innerText = latestData.moisture_b ? latestData.moisture_b.y.toFixed(1) + "%" : "--";
            document.getElementById("potC").innerText = latestData.moisture_c ? latestData.moisture_c.y.toFixed(1) + "%" : "--";
        }

        function createChart(canvasId, label, color) {
            const ctx = document.getElementById(canvasId).getContext("2d");
            return new Chart(ctx, {
                type: 'line',
                data: { datasets: [] }, 
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'time',
                            time: { unit: 'day', tooltipFormat: 'MMM dd' },
                            title: { display: true, text: "Date" }
                        },
                        y: {
                            title: { display: true, text: label }
                        }
                    },
                    plugins: {
                        legend: { display: true, position: "top" }
                    }
                }
            });
        }

        function updateChart(chart, data) {
            if (!chart) return;
            if (chart.data.datasets.length === 0) {
                chart.data.datasets.push({
                    label: chart.options.scales.y.title.text,
                    data: [],
                    borderColor: "black",
                    backgroundColor: "rgba(132, 27, 151, 0.3)",
                    fill: false,
                    tension: 0.3
                });
            }
            chart.data.datasets[0].data = data;
            chart.update();
        }

        async function fetchHistoricalData() {
            try {
                const response = await fetch('/influxdb/history');
                const data = await response.json();

                function extractSortedData(measurementName) {
                    return data.filter(d => d.measurement === measurementName)
                               .map(d => ({ x: new Date(d.time), y: d.value }))
                               .sort((a, b) => a.x - b.x);
                }

                updateChart(temperatureChart, extractSortedData("temperature"));
                updateChart(humidityChart, extractSortedData("humidity"));
                updateChart(pressureChart, extractSortedData("pressure"));
                updateChart(luminanceChart, extractSortedData("luminance"));

                updateDashboardValues({
                    temperature: extractSortedData("temperature").at(-1),
                    humidity: extractSortedData("humidity").at(-1),
                    pressure: extractSortedData("pressure").at(-1),
                    luminance: extractSortedData("luminance").at(-1),
                    moisture_a: extractSortedData("moisture_a").at(-1),
                    moisture_b: extractSortedData("moisture_b").at(-1),
                    moisture_c: extractSortedData("moisture_c").at(-1)
                });

            } catch (error) {
                console.error("❌ Error fetching historical data:", error);
            }
        }

        window.onload = function () {
            temperatureChart = createChart("temperatureChart", "Temperature (°C)", "red");
            humidityChart = createChart("humidityChart", "Humidity (%)", "blue");
            pressureChart = createChart("pressureChart", "Pressure (hPa)", "green");
            luminanceChart = createChart("luminanceChart", "Luminance (lux)", "orange");

            fetchHistoricalData();
            setInterval(fetchHistoricalData, 60000);
        };
    </script>
</body>
</html>
